{
    "collab_server" : "",
    "contents" : "# This is the server logic for a Shiny web application.\n# Author: Enrique Reveron\n# Date: 2016-06-27\n# Content: This Shiny Apps predict the next word for english language using\n#          Knersey-ney Algoritm and Backoff\n\n\nshinyServer(function(input, output,session) {\n\n  # For reactive purposes\n  #myVar <- reactive({\n  #  input$var\n  #})\n  \n  # For reactive purposes\n  #myYear1 <- reactive({\n  #  input$range[1]\n  #})\n  \n  # For reactive purposes\n  #myYear2 <- reactive({\n  #  input$range[2]\n  #})\n  \n  # For reactive purposes\n  #myInputString <- reactive({\n  #  input$text_string\n  #})\n  \n  get_predicted_words <- reactive({\n    input$text_string\n    \n\n\n    isolate({\n      withProgress({\n        setProgress(message = \"Predicting words...\")\n        as.data.frame(main_predict_word(input$text_string))\n      })\n    })\n    \n  })\n  \n  # This function will create the Tittle\n  output$var <- renderText({\n    myds <- get_predicted_words()\n    print(\"Corre ouput var\")\n    myds$word[1]\n  })\n  \n  \n  \n  \n  # This function will create the Tittle\n  output$prediction1 <- renderText({\n    input$text_string\n    myds <- get_predicted_words()\n    print(\"Corre ouput prediction1\")\n    if (nrow(myds) > 0) {\n      myds$word[1]\n    }\n  })\n  \n  # This function will create the Tittle\n  output$prediction2 <- renderText({\n    input$text_string\n    myds <- get_predicted_words()\n    print(\"Corre ouput prediction2\")\n    if (nrow(myds) > 1) {\n      myds$word[2]\n    }\n  })\n  \n  # This function will create the Tittle\n  output$prediction3 <- renderText({\n    input$text_string\n    myds <- get_predicted_words()\n    print(\"Corre ouput prediction3\")\n    if (nrow(myds) > 2) {\n      myds$word[3]\n    }\n  })\n  \n  \n  # This function will create the Tittle\n  output$prediction4 <- renderText({\n    input$text_string\n    myds <- get_predicted_words()\n    print(\"Corre ouput prediction4\")\n    if (nrow(myds) > 3) {\n      myds$word[4]\n    }\n  })\n  \n  # This function will create the Tittle\n  output$prediction5 <- renderText({\n    input$text_string\n    myds <- get_predicted_words()\n    print(\"Corre ouput prediction3\")\n    if (nrow(myds) > 4) {\n      myds$word[5]\n    }\n  })\n  \n  \n  \n  # This function will create the table \n  #output$table <- renderGvis({\n  #  input$text_string\n  #  myds <- get_predicted_words()\n    \n    \n    \n\n    #if (length(input$text_string) < 0) { NULL}\n  #  if (nrow(myds) > 0)\n  #  {\n  #    gvisTable(myds)\n  #  }\n    \n    #gvisTable(as.data.frame(myds),\n              \n            #  options=list(page='enable',\n            #               height='automatic',\n            #               width='automatic'))\n    \n\n # })\n  \n  # Make the wordcloud drawing predictable during a session\n  #wordcloud_rep <- repeatable(wordcloud)\n\n  # This function will create the wordcloud \n  \n  output$word_cloud <- renderPlot({\n    input$text_string\n    myds <- get_predicted_words()\n    \n    \n  \n   # prediction()\n  #output$wordcloud <- renderGvis({\n    \n    #if (length(input$text_string) > 1) {\n    \n    if (nrow(myds) > 0)\n    {\n      wordcloud(myds$word,myds$prob,\n                max.words = 5, random.order = FALSE, random.color = FALSE,\n                rot.per=0,scale=c(3,1), fixed.asp = TRUE,\n                colors = brewer.pal(6, \"Dark2\"))\n    }\n    #}\n    #wordcloud_rep(myds$word, \n    #              round(myds$prob * 10000), \n    #              scale=c(4,0.5), \n    #              colors=brewer.pal(8, \"Dark2\"))\n  })\n  \n})\n \n",
    "created" : 1467119642370.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1635315003",
    "id" : "51576B22",
    "lastKnownWriteTime" : 1467149472,
    "last_content_update" : 1467149472618,
    "path" : "D:/Coursera/Capstone Project/Coursera---Data-Science---Capstone-Project/Predict_Next_Word/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}