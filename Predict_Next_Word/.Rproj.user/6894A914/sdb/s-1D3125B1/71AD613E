{
    "collab_server" : "",
    "contents" : "#####################################################################\n# Predict Next Word vFinal using the backoff implementation \n#   and the knersey-ney probabilities already calculated previously:\n#\n#             DT_uni_prob.Rdata: data table that include all the unigrams \n#                       frequency and the knersey-ney prob\n#             DT_bi_prob.Rdata: data table that include all the bigrams \n#                       frequency and the knersey-ney prob\n#             DT_tri_prob.Rdata: data table that include all the trigrams \n#                       frequency and the knersey-ney prob\n#             DT_quad_prob.Rdata: data table that include all the quadgrams \n#                       frequency and the knersey-ney prob\n\nlibrary(data.table)\n\n#setwd(\"D:/Coursera/Capstone Project/Coursera-SwiftKey/final/en_US\")\n#setwd(\"D:/001 -- Coursera/Capstone Project/Coursera-SwiftKey/final/en_US\")\n\n# For reproducibility\nset.seed(12345)\n\nelapsed_time <- function(tic1,tic2) {\n  format((tic2-tic1)[3][[1]], digits = 2)\n}\n\ncreate_filename <- function(x,lines=-1) {\n  \n  if (lines < 0) {\n    paste(x,\"_all.RData\",sep= \"\")\n  }\n  else {\n    paste(x,\"_\",lines,\".RData\",sep= \"\")\n  }\n}\n\n\n\nload_DT_prob_table <- function (n,lines=-1) {\n  \n  if (n == 1) {\n    var.name <- \"DT.uni.prob\"\n    file.name <- create_filename(\"DT_uni_prob_final\",lines)\n  } else if (n == 2) {\n    var.name <- \"DT.bi.prob\"\n    file.name <- create_filename(\"DT_bi_prob_final\",lines)\n  } else if (n == 3) {\n    var.name <- \"DT.tri.prob\"\n    file.name <- create_filename(\"DT_tri_prob_final\",lines)\n  } else if (n == 4) {\n    var.name <- \"DT.quad.prob\"\n    file.name <- create_filename(\"DT_quad_prob_final\",lines)\n  }\n  \n  #Validate if the DT exists in the enviroment\n  if (!exists(var.name)) {\n    #Validate if the file exists an load the value\n    if (file.exists(file.name)) {\n      print(paste(\"-----> load_DT_prob_table(\",n,\").......\",sep=\"\"))\n      t1 <- proc.time()\n      \n      print(paste(\"Loading DT probability file: \",file.name, sep =\"\"))\n      load(file.name,.GlobalEnv) \n      \n      print(paste(\"Initialization of DT Prob Table from:\",var.name, sep =\"\"))\n      \n      if (n == 1) {\n        DT.uni.prob <<- as.data.table(DT.uni.prob, key = \"t1\")\n        #DT.uni.prob[,prob:=pkn1,]\n        \n        \n      } else if (n == 2) {\n        DT.bi.prob <<- as.data.table(DT.bi.prob, key = \"t1,t2\")\n        #DT.bi.prob[,prob:=pkn1,]\n      } else if (n == 3) {\n        DT.tri.prob <<- as.data.table(DT.tri.prob, key = \"t1,t2,t3\")\n        #DT.tri.prob[,prob:=pkn1,]\n      } else if (n == 4) {\n        DT.quad.prob <<- as.data.table(DT.quad.prob, key = \"t1,t2,t3,t4\")\n        #DT.quad.prob[,prob:=pkn1,]\n      }\n      t2 <- proc.time()\n      \n      print(paste(\"-----> load_DT_prob_table: Running Time .......\",\n                  elapsed_time(t1,t2),\" seconds ...\",sep=\"\"))\n    }\n    else {\n      # Error file doesn't exists\n      print(paste(\"Error file doesnt exist:\",file.name, sep=\"\"))\n    }\n  }\n}\n\n\ntopn_predict <- function(x,p=0,n=5,f=1) {\n  # f is the factor\n  \n  \n  print(paste(\"-----> topn_predict(\",\n              \" word:=(\",paste(x, collapse=\",\"),\")\",\n              \", prob:=\",p,\n              \", nun_words:=\",n,\n              \", factor:=\",f,\n              \").......\",sep=\"\"))\n  \n  \n  #print(paste(\"-----> topn_predict(\",x,\",\",p,\",\",n,\",\",f,\").......\",sep=\"\"))\n  t1 <- proc.time()\n  topn <- NULL\n  \n  \n  l <- length(x)\n  \n  if (l == 1) {\n    #uni-gram level, let's check the bigram table and apply the factor for backoff\n    #topn <- DT.bi[t1 == x[1] & ((prob*f) >= p),\n    #              list(t2, prob2 = prob*f),] [head(order(-prob2),n)]\n\n    #topn <- DT.bi.prob[t1 == x[1] & ((prob*f) >= p),][,word:=t2,][,prob:= prob*f,][,list(word,prob),][head(order(-prob),n)]\n    #\n    \n    topn <- DT.bi.prob[t1 == x[1] & ((prob*f) >= p),,]\n    topn[,c(\"word\",\"prob\") := list(t2,prob*f),]\n    topn <- topn[,list(word,prob),][head(order(-prob),n)]\n\n        \n    #topn[,word:=t2,] \n    #topn[,prob:= prob*f,]\n    #topn <- topn[,list(word,prob),]\n    #topn <- topn[head(order(-prob),n)]\n    #print(topn)\n    \n    num_words <- nrow(topn)\n    \n    print(paste(\"...Found:\",num_words,\" words ...\"))\n    print(topn)\n    \n    if (num_words < n) {\n      \n      print(\"... Default Checking Probability in Unigram Data Table\")\n      \n      #a <- DT.uni.prob[head(order(-prob),n -num_words)] \n      a <- DT.uni.prob[head(order(-prob),n)] \n      a[,word:=t1,] \n      a <- a[,list(word,prob),]\n  \n      print(paste(\"...Found:\",nrow(a),\" words ...\"))\n      print(a)\n      \n      \n      topn <- rbind(topn,a)\n      \n    }\n  }\n  else if (l == 2) {\n    #bi-gram level, let's check the trigram table and apply the factor for backoff\n    #topn <- DT.tri[t1 == x[1] & t2 == x[2] & (prob*f) >= p,\n    #               list(t3,prob2 = prob*f),] [head(order(-prob2),n)]\n    \n    #topn <- DT.tri.prob[t1 == x[1] & t2 == x[2] & (prob*f) >= p,] [,list(word:=t3,prob:= prob*f),] [head(order(prob),n)]\n\n    \n    topn <- DT.tri.prob[t1 == x[1] & t2 == x[2] & ((prob*f) >= p),,]\n    topn[,c(\"word\",\"prob\") := list(t3,prob*f),]\n    topn <- topn[,list(word,prob),][head(order(-prob),n)]\n    \n        \n    num_words <- nrow(topn)\n    \n    print(paste(\"...Found:\",num_words,\" words ...\"))\n    print(topn)\n    \n    if (num_words < n) {\n      print(paste(\"... Backoff to Unigram Level with factor:\",0.4*f))\n      #topn <- rbind(topn,topn_predict(c(x[2]),p,n-num_words,0.4*f))\n      topn <- rbind(topn,topn_predict(c(x[2]),p,n,0.4*f))\n    } \n  }\n  else if (l == 3) {\n    #tri-gram level, let's check the quad.gram table\n    #topn <- DT.quad[t1 == x[1] & t2 == x[2] & t3 == x[3] & (prob*f) >= p,\n    #                list(t4,prob2 = prob*f),] [head(order(-prob2),n)]\n    \n    #topn <- DT.quad.prob[t1 == x[1] & t2 == x[2] & t3 == x[3] & (prob*f) >= p,\n    #                list(word:=t4,prob:= prob*f),] [head(order(prob2),n)]\n    \n    \n    topn <- DT.quad.prob[t1 == x[1] & t2 == x[2] & t3 ==x[3] & ((prob*f) >= p),,]\n    topn[,c(\"word\",\"prob\") := list(t4,prob*f),]\n    topn <- topn[,list(word,prob),][head(order(-prob),n)]\n    \n    num_words <- nrow(topn)\n    \n    print(paste(\"...Found:\",num_words,\" words...\"))\n    print(topn)\n    \n    if (num_words < n) {\n      print(paste(\"... Backoff to Bigram Level with factor:\",0.4*f))\n      #topn <- rbind(topn,topn_predict(c(x[2],x[3]),p,n-num_words,0.4*f))\n      topn <- rbind(topn,topn_predict(c(x[2],x[3]),p,n,0.4*f))\n      \n    }\n  }\n  #colnames(topn) <- c(\"word\",\"prob\")\n  \n  t2 <- proc.time()\n  \n  print(paste(\"-----> topn_predict: Running Time .......\",\n              elapsed_time(t1,t2),\" seconds ...\",sep=\"\"))\n  \n  topn\n}\n\n\npredict_nextword <- function(x,lines=-1,p=0,n=5) {\n  \n  l <- length(x)\n  \n  load_DT_prob_table(1,lines)\n  load_DT_prob_table(2,lines)\n  load_DT_prob_table(3,lines)\n  load_DT_prob_table(4,lines)\n  \n  print(paste(\"-----> predict_nextword(\",\n              \" word:=(\",paste(x, collapse=\",\"),\")\",\n              \", lines:=\",lines,\n              \", prob:=\",p,\n              \", n:=\",n,\n              \").......\",sep=\"\"))\n  t1 <- proc.time()\n  \n  result <- topn_predict(x,p,n,1)\n\n  t2 <- proc.time()\n  print(paste(\"-----> predict_nextword: Running Time .......\",\n              elapsed_time(t1,t2),\" seconds ...\",sep=\"\"))\n  \n  # Remove duplicated values, some words could appers duplicated as a part of\n  # backoff strategy\n  setkey(result,word)\n  result <- unique(result)\n  result[head(order(-prob),n)]\n\n}  \n\n\n",
    "created" : 1467119926146.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1541247242",
    "id" : "71AD613E",
    "lastKnownWriteTime" : 1467121294,
    "last_content_update" : 1467121295003,
    "path" : "D:/Coursera/Capstone Project/Coursera---Data-Science---Capstone-Project/Pred Next Word vFinal.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}