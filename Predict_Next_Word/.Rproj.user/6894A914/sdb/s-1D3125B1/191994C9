{
    "collab_server" : "",
    "contents" : "#####################################################################\n# Create Ngram Data Table VFinal:\n#          Generate the information about the frequency of \n#          the differents ngrams (unigram, bigram, trigram and quadgrams)\n#          to be used later with Kneser-ney algortihm to calculate the\n#          probability of each ngram for predict the next word.\n#          This script was run on my PC and takes long time to finish,\n#          at the end this script they produce the following files:\n#\n#             DT_uni_x.Rdata: data table that include all the unigrams and the\n#                          frequency for each one.\n#             DT_bi_x.Rdata: data table that include all the bigrams and the\n#                          frequency for each one.\n#             DT_tri_x.Rdata: data table that include all the trigrams and the\n#                          frequency for each one.\n#             DT_quad_x.Rdata: data table that include all the quadgrams and the\n#                          frequency for each one.\n#      Where X represent the number of lines of each file (twitter, news and blogs)\n#      that was readed. In case of all lines, x = \"all\"\n\n\nlibrary(quanteda)\nlibrary(data.table)\nlibrary(stringi)\n\n#setwd(\"D:/Coursera/Capstone Project/Coursera-SwiftKey/final/en_US\")\nsetwd(\"D:/001 -- Coursera/Capstone Project/Coursera-SwiftKey/final/en_US\")\n\n# For reproducibility\nset.seed(12345)\n\n# For print elapsed time\nelapsed_time <- function(tic1,tic2) {\n  format((tic2-tic1)[3][[1]], digits = 2)\n}\n\n# For file name creation\ncreate_filename <- function(x,lines) {\n  \n  if (lines < 0) {\n    paste(x,\"_all.RData\",sep= \"\")\n  }\n  else {\n    paste(x,\"_\",lines,\".RData\",sep= \"\")\n  }\n}\n\n# Load, filter and transform the data (twitter, news, blogs). The\n# lines parameter define the number of lines per each dataset to consider.\n# If lines = -1, read all lines.\n\ncreate_mydata <- function(lines=-1) {\n  \n  var.name <- \"mydata\"\n  file.name <- create_filename(\"mydata\",lines)\n\n  #Validate if \"mydata\" exists in the enviroment\n  if (!exists(var.name)) {\n\n    #Validate if \"mydata.Rdata\" file exists an load the value\n    if (file.exists(file.name)) {\n      print(paste(\"Loading file\",file.name,\"....\"))\n      load(file.name,.GlobalEnv)\n    }  \n    else {\n      print(paste(\"-----> create_mydata(\",lines,\").......\",sep=\"\"))\n      t1 <- proc.time()\n      ## Load the data and save the info into the file\n      filename_twitter <- \"en_US.twitter.txt\"\n      filename_news <- \"en_US.news.txt\" \n      filename_blogs <- \"en_US.blogs.txt\"\n      \n      print(\"Loading the Data from the files ...\")\n      \n      print(\"... twitter data ....\")\n      \n      twitter.data <- readLines(filename_twitter, n = lines, encoding=\"UTF-8\", warn = FALSE)\n      print(\"... news data .....\")\n      news.data <- readLines(filename_news, n = lines, encoding=\"UTF-8\", warn = FALSE)\n      print(\"... blogs data ....\")\n      blogs.data <- readLines(filename_blogs, n = lines, encoding=\"UTF-8\", warn = FALSE)\n      \n      # Remove emojies and other characters.\n      print(\"... Removing emojies and other characters ....\")\n      twitter.data <- iconv(twitter.data, \"latin1\", \"ASCII\", sub=\"\")\n      twitter.data <- iconv(twitter.data, \"ISO-8859-2\", \"ASCII\", sub=\"\")\n      \n      news.data <- iconv(news.data, \"latin1\", \"ASCII\", sub=\"\")\n      news.data <- iconv(news.data, \"ISO-8859-2\", \"ASCII\", sub=\"\")\n      \n      blogs.data <- iconv(blogs.data, \"latin1\", \"ASCII\", sub=\"\")\n      blogs.data <- iconv(blogs.data, \"ISO-8859-2\", \"ASCII\", sub=\"\")\n      \n      # toLower\n      print(\"... toLower Data ....\")\n      twitter.data <- toLower(twitter.data)\n      blogs.data <- toLower(blogs.data)\n      news.data <- toLower(news.data)\n      \n      # Replace punctutation for a special word \"eeee\" in order to \n      # avoid some ngrams that doesn't exists\n      print(\"... Replacing punctuation for special characters ....\")   \n      twitter.data <- stri_replace_all_regex(twitter.data,\"[.,;:]\", \" eeee \", \n                                             vectorize_all=FALSE)\n      \n      blogs.data <- stri_replace_all_regex(blogs.data,\"[.,;:]\", \" eeee \", \n                                           vectorize_all=FALSE)\n      news.data <- stri_replace_all_regex(news.data,\"[.,;:]\", \" eeee \", \n                                          vectorize_all=FALSE)\n\n      # Replace the rest of punctutation \n      print(\"... Replacing rest of punctuation ....\")   \n      twitter.data <- stri_replace_all_regex(twitter.data,\"[:punct:]\", \" \", \n                                             vectorize_all=FALSE)\n      blogs.data <- stri_replace_all_regex(blogs.data,\"[:punct:]\", \" \", \n                                           vectorize_all=FALSE)\n      news.data <- stri_replace_all_regex(news.data,\"[:punct:]\", \" \", \n                                          vectorize_all=FALSE)\n      # Final Data    \n      mydata <<- c(twitter.data, news.data, blogs.data)\n      \n      print(paste(\"... Saving mydata file:\",file.name,sep=\"\"))\n      save(mydata,file=file.name)\n      \n      rm(\"twitter.data\",\"news.data\",\"blogs.data\",\n         \"filename_twitter\", \"filename_news\", \"filename_blogs\")\n      \n      t2 <- proc.time()\n      print(paste(\"-----> create_mydata: Running Time .......\",\n                  elapsed_time(t1,t2),\" seconds ...\",sep=\"\"))\n    }\n  }\n  gc()\n}\n\n\ncreate_alltokens <- function(lines=-1) {\n  \n  var.name <- \"alltokens\"\n  file.name <- create_filename(\"alltokens\",lines)\n  \n  #Validate if \"alltokens\" exists in the enviroment\n  if (!exists(var.name)) {\n    #Validate if \"alltokens.Rdata\" file exists an load the value\n    if (file.exists(file.name)) {\n      print(paste(\"Loading file\",file.name,\" ....\"))\n      load(file.name,.GlobalEnv) \n    }  \n    else {\n      ## Load \"mydata\" \n      create_mydata(lines)\n      \n      print(paste(\"-----> create_alltokens(\",lines,\").......\",sep=\"\"))\n      t1 <- proc.time()\n      \n      print(\"Creating alltokens ...\")\n      # Create \"alltokens\" and save it into the file\n      alltokens <<- tokenize(mydata, what = \"fastestword\", \n                        removeNumbers = TRUE, \n                        removePunct = TRUE,\n                        removeSymbols = TRUE, \n                        removeSeparators = TRUE, \n                        removeTwitter = TRUE,\n                        removeHyphens = TRUE, \n                        removeURL = TRUE, \n                        verbose = TRUE)\n      \n      print(paste(\"... Saving alltokens file:\",file.name,sep=\"\"))\n      save(alltokens,file=file.name)\n      rm(\"mydata\",envir =.GlobalEnv)\n      \n      t2 <- proc.time()\n      print(paste(\"-----> create_alltokens: Running Time .......\",\n                  elapsed_time(t1,t2),\" seconds ...\",sep=\"\"))\n      \n    }\n  }\n  gc()\n}\n\n\ncreate_ngram <- function(n,lines=-1)\n{\n  \n  switch(n,\n         \"1\" = {\n           var.name <- \"uni.ngram\"\n           file.name <- create_filename(\"uni_ngram\",lines)\n         },\n         \"2\" = {\n           var.name <- \"bi.ngram\"\n           file.name <- create_filename(\"bi_ngram\",lines)\n         },\n         \"3\"={\n           var.name <- \"tri.ngram\"\n           file.name <- create_filename(\"tri_ngram\",lines)\n         },\n         \"4\"={\n           var.name <- \"quad.ngram\"\n           file.name <- create_filename(\"quad_ngram\",lines)\n         }\n  )\n\n  #if (n == 1) {\n  #  var.name <- \"uni.ngram\"\n  #  file.name <- create_filename(\"uni_ngram\",lines)\n  #} else if (n == 2) {\n  #  var.name <- \"bi.ngram\"\n  #  file.name <- create_filename(\"bi_ngram\",lines)\n  #} else if (n == 3) {\n  #  var.name <- \"tri.ngram\"\n  #  file.name <- create_filename(\"tri_ngram\",lines)\n  #} else if (n == 4) {\n  #  var.name <- \"quad.ngram\"\n  #  file.name <- create_filename(\"quad_ngram\",lines)\n  #}\n  \n  #Validate if the \"var.name\" exists in the enviroment\n  if (!exists(var.name)) {\n    #Validate if \"file.name\" file exists an load the value\n    if (file.exists(file.name)) {\n      print(paste(\"Loading ngram file: \",file.name, sep =\"\"))\n      load(file.name,.GlobalEnv) \n    }  else {\n      ## Load \"alltokens\" and create the ngrams\n      create_alltokens(lines)\n      print(paste(\"-----> create_ngram(\",n,\",\",lines,\").......\",sep=\"\"))\n      t1 <- proc.time()\n      \n      print(paste(\"... Creating Ngram:\",var.name,sep=\"\"))\n      \n      switch(n,\n             \"1\"= { #Unigrams\n               uni.ngram <<- ngrams(alltokens, 1)\n               print(paste(\"... Saving Ngram file:\",file.name, sep=\"\"))       \n             },\n             \"2\"= { #Bigrams\n               bi.ngram <<- ngrams(alltokens, 2)\n               print(paste(\"... Saving Ngram file:\",file.name,sep=\"\"))\n             },\n             \"3\"= { #Trigrams\n               tri.ngram <<- ngrams(alltokens, 3)\n               print(paste(\"... Saving Ngram file:\",file.name,sep=\"\"))\n               save(tri.ngram,file=file.name)\n             },\n             \"4\"= { #Quadgrams\n               quad.ngram <<- ngrams(alltokens, 4)\n               print(paste(\"... Saving Ngram file:\",file.name,sep=\"\"))\n               save(quad.ngram,file=file.name)\n             }\n      )\n      \n      #if (n == 1) {\n      #  uni.ngram <<- ngrams(alltokens, 1)\n      #  print(paste(\"... Saving Ngram file:\",file.name, sep=\"\"))\n      #  save(uni.ngram,file=file.name)\n      #} else if (n == 2) {\n      #  bi.ngram <<- ngrams(alltokens, 2)\n      #  print(paste(\"... Saving Ngram file:\",file.name,sep=\"\"))\n      #  save(bi.ngram,file=file.name)\n      #} else if (n == 3) {\n      #  tri.ngram <<- ngrams(alltokens, 3)\n      #  print(paste(\"... Saving Ngram file:\",file.name,sep=\"\"))\n      #  save(tri.ngram,file=file.name)\n      #} else if (n == 4) {\n      #  quad.ngram <<- ngrams(alltokens, 4)\n      #  print(paste(\"... Saving Ngram file:\",file.name,sep=\"\"))\n      #  save(quad.ngram,file=file.name)\n      #}\n      rm(\"alltokens\",envir =.GlobalEnv)\n      t2 <- proc.time()\n      print(paste(\"-----> create_ngram: Running Time .......\",\n                  elapsed_time(t1,t2),\" seconds ...\",sep=\"\"))\n    }\n    \n  }\n  gc()\n}\n    \n   \nclean_ngram <- function(n,lines=-1)\n{\n  # List of Profanity words to be removed\n  profanityList <- c(\"shit\",\"piss\",\"fuck\",\"cunt\",\"cocksucker\",\"motherfucker\",\"tits\")\n  \n  if (n == 1) {\n    var.name <- \"uni.ngram.clean\"\n    file.name <- create_filename(\"uni_ngram_clean\",lines)\n    ngram.name <- \"uni.ngram\"\n  } else if (n == 2) {\n    var.name <- \"bi.ngram.clean\"\n    file.name <- create_filename(\"bi_ngram_clean\",lines)\n    ngram.name <- \"bi.ngram\"\n  } else if (n == 3) {\n    var.name <- \"tri.ngram.clean\"\n    file.name <- create_filename(\"tri_ngram_clean\",lines)\n    ngram.name <- \"tri.ngram\"\n  } else if (n == 4) {\n    var.name <- \"quad.ngram.clean\"\n    file.name <- create_filename(\"quad_ngram_clean\",lines)\n    ngram.name <- \"quad.ngram\"\n  }  \n  \n  #Validate if the \"var.name\" exists in the enviroment\n  if (!exists(var.name)) {\n    #Validate if \"file.name\" file exists an load the value\n    if (file.exists(file.name)) {\n      print(paste(\"Loading ngram cleaned file: \",file.name, sep =\"\"))\n      load(file.name,.GlobalEnv) \n    }  else {\n      ## Load the ngrams and cleaned it  \n     \n      create_ngram(n,lines)\n      print(paste(\"-----> clean_ngram(\",n,\",\",lines,\").......\",sep=\"\"))\n      t1 <- proc.time()\n      \n      print(paste(\"... Cleaning Ngram: \",ngram.name, sep =\"\"))\n      if (n == 1) {\n        uni.ngram.clean <<- \n          selectFeatures(uni.ngram, c(profanityList,\"eeee\"),\n                         selection = \"remove\", valuetype = \"regex\")\n        rm(uni.ngram,envir =.GlobalEnv)\n        print(paste(\"... Saving Ngram Cleaned file: \",file.name, sep =\"\"))\n        save(uni.ngram.clean,file=file.name)\n      } else if (n == 2) {\n        bi.ngram.clean <<- \n          selectFeatures(bi.ngram, c(profanityList,\"eeee\"),\n                         selection = \"remove\", valuetype = \"regex\")\n        rm(bi.ngram,envir =.GlobalEnv)\n        print(paste(\"... Saving Ngram Cleaned file: \",file.name, sep =\"\"))\n        save(bi.ngram.clean,file=file.name)\n      } else if (n == 3) {\n        tri.ngram.clean <<- \n          selectFeatures(tri.ngram, c(profanityList,\"eeee\"),\n                         selection = \"remove\", valuetype = \"regex\")\n        rm(tri.ngram,envir =.GlobalEnv)\n        print(paste(\"... Saving Ngram Cleaned file: \",file.name, sep =\"\"))\n        save(tri.ngram.clean,file=file.name)\n      } else if (n == 4) {\n        quad.ngram.clean <<- \n          selectFeatures(quad.ngram, c(profanityList,\"eeee\"),\n                         selection = \"remove\", valuetype = \"regex\")\n        rm(quad.ngram,envir =.GlobalEnv)\n        print(paste(\"... Saving Ngram Cleaned file: \",file.name, sep =\"\"))\n        save(quad.ngram.clean,file=file.name)\n      }\n      t2 <- proc.time()\n      print(paste(\"-----> clean_ngram: Running Time .......\",\n                  elapsed_time(t1,t2),\" seconds ...\",sep=\"\"))\n    }\n  }\n  gc() \n}\n  \n  \ncreate_dfm <- function(n,lines=-1) {\n  \n  if (n == 1) {\n    var.name <- \"uni.dfm\"\n    file.name <- create_filename(\"uni_dfm\",lines)\n    ngram.clean.name <- \"uni.ngram.clean\"\n  } else if (n == 2) {\n    var.name <- \"bi.dfm\"\n    file.name <- create_filename(\"bi_dfm\",lines)\n    ngram.clean.name <- \"bi.ngram.clean\"\n  } else if (n == 3) {\n    var.name <- \"tri.dfm\"\n    file.name <- create_filename(\"tri_dfm\",lines)\n    ngram.clean.name <- \"tri.ngram.clean\"\n  } else if (n == 4) {\n    var.name <- \"quad.dfm\"\n    file.name <- create_filename(\"quad_dfm\",lines)\n    ngram.clean.name <- \"quad.ngram.clean\"\n  }  \n  \n\n  #Validate if the \"var.name\" exists in the enviroment\n  if (!exists(var.name)) {\n    #Validate if \"file.name\" file exists an load the value\n    if (file.exists(file.name)) {\n      print(paste(\"Loading dfm file:\", file.name, sep=\"\"))\n      load(file.name,.GlobalEnv) \n    }  else {\n      ## Load the ngrams and cleaned it \n      \n      \n      clean_ngram(n,lines)\n      \n      print(paste(\"-----> create_dfm(\",n,\",\",lines,\").......\",sep=\"\"))\n      t1 <- proc.time()\n      \n      print(paste(\"... Creating dfm:\", var.name, sep=\"\"))\n      if (n == 1) {\n        uni.dfm <<- dfm(uni.ngram.clean,toLower = FALSE)\n        rm(uni.ngram.clean,envir =.GlobalEnv)\n        print(paste(\"... Saving dfm file:\", file.name, sep=\"\"))\n        save(uni.dfm,file=file.name)\n      } else if (n == 2) {\n        bi.dfm <<- dfm(bi.ngram.clean,toLower = FALSE)\n        rm(bi.ngram.clean,envir =.GlobalEnv)\n        print(paste(\"... Saving dfm file:\", file.name, sep=\"\"))\n        save(bi.dfm,file=file.name)\n      } else if (n == 3) {\n        tri.dfm <<- dfm(tri.ngram.clean,toLower = FALSE)\n        rm(tri.ngram.clean,envir =.GlobalEnv)\n        print(paste(\"... Saving dfm file:\", file.name, sep=\"\"))\n        save(tri.dfm,file=file.name)\n      } else if (n == 4) {\n        quad.dfm <<- dfm(quad.ngram.clean,toLower = FALSE)\n        rm(quad.ngram.clean,envir =.GlobalEnv)\n        print(paste(\"... Saving dfm file:\", file.name, sep=\"\"))\n        save(quad.dfm,file=file.name)\n      }\n      t2 <- proc.time()\n      print(paste(\"-----> create_dfm: Running Time .......\",\n                  elapsed_time(t1,t2),\" seconds ...\",sep=\"\"))\n    }\n  }  \n  gc()\n}\n\n\ntrim_dfm <- function(n,lines=-1,mincount=5) {\n  \n  if (n == 1) {\n    var.name <- \"uni.dfm.trim\"\n    file.name <- create_filename(\"uni_dfm_trim\",lines)\n    dfm.name <- \"uni.dfm\"\n  } else if (n == 2) {\n    var.name <- \"bi.dfm.trim\"\n    file.name <- create_filename(\"bi_dfm_trim\",lines)\n    dfm.name <- \"bi.dfm\"\n  } else if (n == 3) {\n    var.name <- \"tri.dfm.trim\"\n    file.name <- create_filename(\"tri_dfm_trim\",lines)\n    dfm.name <- \"tri.dfm\"\n  } else if (n == 4) {\n    var.name <- \"quad.dfm.trim\"\n    file.name <- create_filename(\"quad_dfm_trim\",lines)\n    dfm.name <- \"quad.dfm\"\n  }  \n  \n  #Validate if the \"var.name\" exists in the enviroment\n  if (!exists(var.name)) {\n    #Validate if \"file.name\" file exists an load the value\n    if (file.exists(file.name)) {\n      print(paste(\"Loading dfm trim file:\",file.name,sep=\"\"))\n      load(file.name,.GlobalEnv) \n    }  else {\n      ## Load the dfm  \n      create_dfm(n,lines)\n      print(paste(\"-----> trim_dfm(\",n,\",\",lines,\").......\",sep=\"\"))\n      t1 <- proc.time()\n      \n      print(paste(\"... trim dfm:\", var.name, sep=\"\"))\n      if (n == 1) {\n        \n        uni.dfm.clean <<- trim(uni.dfm,minCount = mincount)\n        rm(\"uni.dfm\",envir =.GlobalEnv)\n        gc()\n        print(\"... Saving dfm clean: uni.dfm.clean ..\")\n        save(uni.dfm.clean,file=file.name)\n\n      } else if (n == 2) {\n        \n        bi.dfm.clean <<- trim(bi.dfm,minCount = mincount)\n        rm(\"bi.dfm\",envir =.GlobalEnv)\n        gc()\n        print(\"... Saving dfm clean: bi.dfm.clean ..\")\n        save(bi.dfm.clean,file=file.name)\n        \n      } else if (n == 3) {\n        \n        tri.dfm.clean <<- trim(tri.dfm,minCount = mincount)\n        rm(\"tri.dfm\",envir =.GlobalEnv)\n        gc()\n        print(\"... Saving dfm clean: tri.dfm.clean ..\")\n        save(tri.dfm.clean,file=file.name)\n       \n      } else if (n == 4) {\n        \n        quad.dfm.clean <<- trim(quad.dfm,minCount = mincount)\n        rm(\"quad.dfm\",envir =.GlobalEnv)\n        gc()\n        print(\"... Saving dfm clean: quad.dfm.clean ..\")\n        save(quad.dfm.clean,file=file.name)\n      }\n      t2 <- proc.time()\n      print(paste(\"-----> trim_dfm: Running Time .......\",\n                  elapsed_time(t1,t2),\" seconds ...\",sep=\"\"))\n    }\n  } \n  gc()\n} \n\n  \n      \ncreate_DT <- function(n,lines=-1,mincount=5) {\n  \n  if (n == 1) {\n    var.name <- \"DT.uni\"\n    file.name <- create_filename(\"DT_uni\",lines)\n    dfm.name <- \"uni.dfm.trim\"\n  } else if (n == 2) {\n    var.name <- \"DT.bi\"\n    file.name <- create_filename(\"DT_bi\",lines)\n    dfm.name <- \"bi.dfm.trim\"\n  } else if (n == 3) {\n    var.name <- \"DT.tri\"\n    file.name <- create_filename(\"DT_tri\",lines)\n    dfm.name <- \"tri.dfm.trim\"\n  } else if (n == 4) {\n    var.name <- \"DT.quad\"\n    file.name <- create_filename(\"DT_quad\",lines)\n    dfm.name <- \"quad.dfm.trim\"\n  }  \n  \n  #Validate if the \"var.name\" exists in the enviroment\n  if (!exists(var.name)) {\n    #Validate if \"file.name\" file exists an load the value\n    if (file.exists(file.name)) {\n      print(paste(\"Loading DT file:\",file.name,sep=\"\"))\n      load(file.name,.GlobalEnv) \n    }  else {\n      ## Load the dfm trim \n      trim_dfm(n,lines,mincount)\n      \n      print(paste(\"-----> create_DT(\",n,\",\",lines,\").......\",sep=\"\"))\n      t1 <- proc.time()\n      \n      print(paste(\"... Creating DT:\", var.name, sep=\"\"))\n      if (n == 1) {\n        #\n        # Create DT for unigrams:\n        #     t1  freq  \n        n.uni <- nfeature(uni.dfm.clean)\n        top.uni <- topfeatures(uni.dfm.clean,n.uni)\n        rm(\"uni.dfm.clean\",envir =.GlobalEnv)\n        gc()\n        DT.uni <<- data.table(t1=names(top.uni),freq=top.uni)\n        print(\"... Saving DT.uni ..\")\n        save(DT.uni,file=file.name)\n        rm(\"top.uni\",\"n.uni\")        \n  \n      } else if (n == 2) {\n\n        #\n        # DT for bigrams:\n        #     t1  t2  freq\n        n.bi <- nfeature(bi.dfm.clean)\n        top.bi <- topfeatures(bi.dfm.clean,n.bi)\n        rm(\"bi.dfm.clean\",envir =.GlobalEnv)\n        gc()\n        DT.bi <<- data.table(V1=names(top.bi),freq=top.bi)\n        rm(\"top.bi\",\"n.bi\")\n        gc()\n        DT.bi[,c(\"t1\",\"t2\") := tstrsplit(V1, \"_\", fixed=TRUE),]\n        DT.bi <<- DT.bi[,list(t1,t2,freq),]\n        print(\"... Saving DT.bi ..\")\n        save(DT.bi,file=file.name)\n      } else if (n == 3) {\n\n        #\n        # DT for trigrams:\n        #     t1  t2  t3 freq  \n\n        n.tri <- nfeature(tri.dfm.clean)\n        top.tri <- topfeatures(tri.dfm.clean,n.tri)\n        rm(\"tri.dfm.clean\",envir =.GlobalEnv)\n        gc()\n        DT.tri <<- data.table(V1=names(top.tri),freq=top.tri)\n        rm(\"top.tri\",\"n.tri\")\n        gc()\n        DT.tri[,c(\"t1\", \"t2\",\"t3\") := tstrsplit(V1, \"_\", fixed=TRUE),]\n        DT.tri <<- DT.tri[,list(t1,t2,t3,freq),]\n        print(\"... Saving DT.tri ..\")\n        save(DT.tri,file=file.name)\n      } else if (n == 4) {\n\n        #\n        # DT for quadgrams:\n        #     t1  t2  t3 t4 freq\n        \n        n.quad <- nfeature(quad.dfm.clean)\n        top.quad <- topfeatures(quad.dfm.clean,n.quad)\n        rm(\"quad.dfm.clean\", envir =.GlobalEnv)\n        gc()\n        DT.quad <<- data.table(V1=names(top.quad),freq=top.quad)\n        rm(\"top.quad\",\"n.quad\")\n        gc()\n        DT.quad <- DT.quad[,c(\"t1\", \"t2\",\"t3\",\"t4\") := tstrsplit(V1, \"_\", fixed=TRUE),]\n        DT.quad <<- DT.quad[,list(t1,t2,t3,t4,freq),]\n        print(\"... Saving DT.quad ..\")\n        save(DT.quad,file=file.name)\n      }\n      t2 <- proc.time()\n      \n      print(paste(\"-----> create_DT: Running Time .......\",\n                  elapsed_time(t1,t2),\" seconds ...\",sep=\"\"))\n    }\n      \n  } \n  gc()\n} ",
    "created" : 1467296648121.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1095129536",
    "id" : "191994C9",
    "lastKnownWriteTime" : 1467297195,
    "last_content_update" : 1467297195083,
    "path" : "D:/Coursera/Capstone Project/Coursera---Data-Science---Capstone-Project/Create Ngrams Data Table vFinal.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}