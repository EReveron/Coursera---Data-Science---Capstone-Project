{
    "contents" : "Predictor!: A NLP Shiny App to Predict Next Word\n========================================================\nauthor: Enrique Reveron \ndate: 2016-07-17\nwidth: 1440\nheight: 900\n\n\nOverview\n========================================================\n<small>\n**Predictor!** is a Natural Language Processing (NLP) App that predicts the next word to be typed by the user based on a US dataset of blogs, twitter and news datasets (the *Corpora*).\n\nThis application was built as part of the **Capstone Switfkey Project** \nthe final stage of the **Coursera Data Science Specialization**.\n\nThe app is available at: **http://ereveron.shinyapps.io/Predictor/**\n\nThe Source Code for the App and all the related files are available on the GitHub repo: **http://github.com/EReveron/Coursera---Data-Science---Capstone-Project**\n</small>\n\n\nThe Solution\n========================================================\n<small>\nThe most important aspects related with **Predictor!** App are:\n\n- The *Corpora* was cleaned and subsetted to **80%**.\n- The App use a **Quadgram Model** that include: Unigrams, Bigrams, Trigrams and Quadgrams. This model was created using the **quanteda** package.\n- All the probabilities are **pre-calculated** using the **Kneser-ney Smoothing Algoritm** and **Stupid Backoff** mechanism in case that the word doesn't exists into the corpora.\n- The **Probability Calculation** was made on a iterative implementation using the **data.table** package. \n- The **prediction** could be made for **non-complete** words, that means, when the user start typing the letters the application will show as a prediction the one with biggest probability that match it.\n\n</small>\n\nKneser-ney Smoothing Algorithm\n========================================================\n<small>\nWe use the following **Kneser-ney implementation** for:\n\n**Lowest Order (Unigrams) Equation:**\n\n$${P_{KN}^{1}(w_{i})} = \\frac{N_{1+}({\\bullet} w_{i})} \n{ N_{1+}({\\bullet} {\\bullet})}$$\n\n**Second Highest Ngrams to Bigrams Equation:**\n\n$$P_{KN}^{n}(w_{i}{\\mid}w_{i-n+1}^{i}) = \n\\frac{max\\left\\{ N_{1+}(\\bullet w_{i-n+1}^{i} )-{\\delta}_{n},0\\right\\} }\n{ N_{1+}(\\bullet w_{i-n+1}^{i-1}\\bullet)} + \n\\frac{{\\delta}_{n}} {N_{1+}(\\bullet w_{i-n+1}^{i-1}\\bullet)} \nN_{1+}(w_{i-n+1}^{i-1}\\bullet)P_{KN}^{n-1}(w_{i}{\\mid}w_{i-n+2}^{i-1})$$\n\n**Highest Order Equation:**\n\n$$P_{KN}^{n}(w_{i}{\\mid}w_{i-n+1}^{i}) = \n\\frac{max\\left\\{c(w_{i-n+1}^{i}) -{\\delta}_{n},0\\right\\} } \n{ \\sum_{w'_{i}} c(w_{i-n+1}^{i-1},{w'_{i}})} + \\frac{{\\delta}_{n}} {\\sum_{w'_{i}} c(w_{i-n+1}^{i-1},{w'_{i}})} \nN_{1+}(w_{i-n+1}^{i-1}\\bullet )P_{KN}^{n-1}(w_{i}{\\mid}w_{i-n+2}^{i-1})$$\n</small>\n\nWeb Application Functionality\n========================================================\n<small>\nThe app offer to the user several parameters to choose:\n - Two **Sizes of Probability Tables**: with **Freq >= 5** and **Freq > 1** in order to compare if a small one affect the prediction task.\n - Two **Prediction Methods**: based on **Complete** or **Incomplete** Words to have a more interactive behavior. \n - The **Minimun Probability Range** of the words to be considered and \n - The **Maximun Number of Words** to get.\n\nAnd also provide:\n - A table with the **predicted words** and a  **wordcloud** plot of those words. \n - The **top predicted word** is showed in **bold blue** in the next line to the user text input box. \n - Is possible to **search the content** of the **ngrams probability tables**.\n - Three **reports**: *Milestone, Final* and *Final Test*\n \n</small>",
    "created" : 1468783878571.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1992247989",
    "id" : "69628558",
    "lastKnownWriteTime" : 1468789260,
    "path" : "D:/001 -- Coursera/Capstone Project/Coursera---Data-Science---Capstone-Project/Predictor.Rpres",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_presentation"
}