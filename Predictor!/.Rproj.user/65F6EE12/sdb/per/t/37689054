{
    "contents" : "# This is the server logic for a Shiny web application.\n# Author: Enrique Reveron\n# Date: 2016-07-17\n# Content: This Shiny Apps predict the next word for english language using\n#          Knersey-ney Algoritm and Backoff\n\n\nshinyServer(function(input, output,session) {\n\n \n  load_Prob_Table <- reactive({\n    input$prob_table\n    \n    isolate({\n      withProgress({\n        setProgress(message = \"Loading Data Tables ...\")\n        \n        if (input$prob_table == \"With Freq >= 5\") {\n          training_set <<- \"80.5\"\n        } else {\n          training_set <<- \"80.2\"\n        }\n        rm(DT.uni.prob.final,envir = .GlobalEnv)\n        rm(DT.bi.prob.final,envir = .GlobalEnv)\n        rm(DT.tri.prob.final,envir = .GlobalEnv)\n        rm(DT.quad.prob.final,envir = .GlobalEnv)\n        load_DT_prob_final_table(1,training_set)\n        load_DT_prob_final_table(2,training_set)\n        load_DT_prob_final_table(3,training_set)\n        load_DT_prob_final_table(4,training_set)\n      })\n    })\n  })\n        \n    \n  \n  get_predicted_words <- reactive({\n    input$text_string\n    input$pred_method\n    input$minprob\n    input$maxwords\n    input$prob_table\n    \n    isolate({\n      withProgress({\n        setProgress(message = \"Predicting words...\")\n        \n        if (input$pred_method == \"Incomplete Words\") {\n          with_regex <- TRUE\n        } else {\n          with_regex <- FALSE\n        }\n        as.data.frame(\n          main_predict_word(input$text_string,input$minprob,input$maxwords,with_regex))\n      })\n    })\n  })\n  \n  output$table <- renderDataTable({\n    load_Prob_Table()\n    \n    myds <- get_predicted_words()\n    if (nrow(myds) > 0) {\n      myds\n    }\n  }, options = list(lengthChange = FALSE, orderClasses = FALSE, scroller = FALSE))\n  \n  output$unigrams_table <- renderDataTable({\n    load_Prob_Table()\n    DT.uni.prob.final\n  }, options = list(lengthChange = TRUE,orderClasses = TRUE, scroller = TRUE))\n  \n  output$bigrams_table <- renderDataTable({\n    load_Prob_Table()\n    DT.bi.prob.final\n  }, options = list(lengthChange = TRUE,orderClasses = TRUE, scroller = TRUE))\n  \n  output$trigrams_table <- renderDataTable({\n    load_Prob_Table()\n    DT.tri.prob.final\n  }, options = list(lengthChange = TRUE,orderClasses = TRUE, scroller = TRUE))\n  \n  output$quadgrams_table <- renderDataTable({\n    load_Prob_Table()\n    DT.quad.prob.final\n  }, options = list(lengthChange = TRUE,orderClasses = TRUE, scroller = TRUE))\n  \n  output$freq_table <- renderDataTable({\n    load_Prob_Table()\n    DT_prob_freq(training_set)\n    \n  }, options = list(lengthChange = TRUE,orderClasses = TRUE, scroller = TRUE))\n  \n  output$freq_plot <- renderPlot({\n    isolate({\n      withProgress({\n        setProgress(message = \"Generating Data ...\")\n\n        load_Prob_Table()\n        \n        g1 <- ggplot(data=DT.uni.prob.final, aes(freq1)) +\n          geom_histogram(breaks=seq(1, 50, by = 1),\n                         col=\"red\", \n                         fill=\"green\") + \n          labs(title=\"Histogram for Unigrams Frequency\") +\n          labs(x=\"Frequency\",y=\"Number of Unigrams\") \n        \n        \n        g2 <- ggplot(data=DT.bi.prob.final, aes(freq2)) +\n          geom_histogram(breaks=seq(1, 50, by = 1),\n                         col=\"red\", \n                         fill=\"blue\") +\n          labs(title=\"Histogram for Bigrams Frequency\") +\n          labs(x=\"Frequency\",y=\"Number of Bigrams\") \n        \n        g3 <- ggplot(data=DT.tri.prob.final, aes(freq3)) +\n          geom_histogram(breaks=seq(1, 50, by = 1),\n                         col=\"red\", \n                         fill=\"white\") + \n          labs(title=\"Histogram for Trigrams Frequency\") +\n          labs(x=\"Frequency\",y=\"Number of Trigrams\") \n        \n        g4 <- ggplot(data=DT.quad.prob.final, aes(freq4)) +\n          geom_histogram(breaks=seq(1, 50, by = 1),\n                         col=\"yellow\", \n                         fill=\"red\") +\n          labs(title=\"Histogram for Quadgrams Frequency\") +\n          labs(x=\"Frequency\",y=\"Number of Quadgrams\") \n        \n        grid.arrange(g1, g2, g3,g4, ncol = 2, nrow = 2)\n      })\n    })\n  })\n            \n  \n  # This function will create the wordcloud \n  \n  output$word_cloud <- renderPlot({\n    load_Prob_Table()\n    myds <- get_predicted_words()\n    \n    if (nrow(myds) > 0)\n    {\n      if (input$maxwords < 5) {\n        scale_wordcloud <- c(7,5)\n      } else if (input$maxwords < 10) {\n        scale_wordcloud <- c(6,4)\n      }\n      else {\n        scale_wordcloud <- c(5,3)\n      }\n      \n      wordcloud(myds$word,myds$prob,\n                max.words = input$maxwords, random.order = FALSE, random.color = FALSE,\n                rot.per=0,scale=scale_wordcloud, fixed.asp = TRUE,\n                colors = brewer.pal(6, \"Dark2\"))\n    } \n  })\n  \n  \n  output$text_pred <- renderUI({\n    myds <- get_predicted_words()\n    \n    if (nrow(myds) > 0) {\n      word_predicted <- myds$word[1]\n      \n      last_word <- last_n_words(input$text_string,1)\n      \n      is_final_word <- stri_endswith_fixed(input$text_string,\" \")\n      \n      if (input$pred_method == \"Incomplete Words\") {\n        \n        if (!is_final_word) {\n          word_predicted <- stri_replace_all_regex(word_predicted,\n                                                 paste0(last_word,\"(.*)\"),\n                                                 \"$1\")\n        }\n      } \n      word_predicted <- tags$span(word_predicted,style = \"color:blue\")\n    } else {\n      word_predicted <- \"\"\n    }  \n    HTML(paste0(\"<h4>\",input$text_string,\"<b>\",word_predicted,\"</b>\",\"</h4>\"))\n\n  })\n  \n\n  getPage<-function(x) {\n    return(includeHTML(x))\n  }\n  \n  output$report1 <-renderUI({getPage(\"Middle_Report.html\")})\n  \n  output$report2 <-renderUI({getPage(\"Final_Report.html\")})\n  \n  output$report3 <-renderUI({getPage(\"Final_Test_Report.html\")})\n  \n  \n})\n \n",
    "created" : 1468783513812.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1357861109",
    "id" : "37689054",
    "lastKnownWriteTime" : 1468783531,
    "path" : "D:/001 -- Coursera/Capstone Project/Coursera---Data-Science---Capstone-Project/Predictor!/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}